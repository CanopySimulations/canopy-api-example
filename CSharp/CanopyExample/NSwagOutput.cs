//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v6.11.6129.25106 (NJsonSchema v4.28.6128.27588) (http://NSwag.org)
// </auto-generated>
//----------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Reflection;
using System.Runtime.Serialization;
using System.Runtime.CompilerServices;
using System.Threading;
using System.Threading.Tasks;
using System.Text;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Serialization;

namespace CanopyExample
{
#pragma warning disable // Disable all warnings

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class AccountSettingsClient : CanopyApiBase
    {
        public AccountSettingsClient() : this("https://api.canopysimulations.com") { }

        public AccountSettingsClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId)
        {
            return GetAsync(tenantId, userId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetAccountSettingsResult> GetAsync(string tenantId, string userId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "account-settings/{tenantId}/{userId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetAccountSettingsResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetAccountSettingsResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData)
        {
            return PutAsync(tenantId, userId, updatedAccountSettingsData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutAsync(string tenantId, string userId, UpdatedAccountSettings updatedAccountSettingsData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "account-settings/{tenantId}/{userId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(updatedAccountSettingsData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class AvailabilityClient : CanopyApiBase
    {
        public AvailabilityClient() : this("https://api.canopysimulations.com") { }

        public AvailabilityClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<AvailabilityResult> GetAsync()
        {
            return GetAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<AvailabilityResult> GetAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "Availability");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(AvailabilityResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<AvailabilityResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> HeadAsync()
        {
            return HeadAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> HeadAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "Availability");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("HEAD");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class ConfigClient : CanopyApiBase
    {
        public ConfigClient() : this("https://api.canopysimulations.com") { }

        public ConfigClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<FilteredQueryResult> GetConfigsAsyncAsync(string tenantId, string configType, string filter, string subTreePath)
        {
            return GetConfigsAsyncAsync(tenantId, configType, filter, subTreePath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<FilteredQueryResult> GetConfigsAsyncAsync(string tenantId, string configType, string filter, string subTreePath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "configs/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (configType == null)
                throw new ArgumentNullException("configType");
            else
                url_ += string.Format("configType={0}&", Uri.EscapeDataString(configType.ToString()));

            if (filter != null)
                url_ += string.Format("filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (subTreePath != null)
                url_ += string.Format("subTreePath={0}&", Uri.EscapeDataString(subTreePath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(FilteredQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<FilteredQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> PostConfigAsyncAsync(string tenantId, string userId, NewConfigData data, string subTreePath)
        {
            return PostConfigAsyncAsync(tenantId, userId, data, subTreePath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> PostConfigAsyncAsync(string tenantId, string userId, NewConfigData data, string subTreePath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "configs/{tenantId}/{userId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (subTreePath != null)
                url_ += string.Format("subTreePath={0}&", Uri.EscapeDataString(subTreePath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(string);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetConfigQueryResult> GetConfigAsyncAsync(string tenantId, string userId, string configId, string subTreePath)
        {
            return GetConfigAsyncAsync(tenantId, userId, configId, subTreePath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetConfigQueryResult> GetConfigAsyncAsync(string tenantId, string userId, string configId, string subTreePath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "configs/{tenantId}/{userId}/{configId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (configId == null)
                throw new ArgumentNullException("configId");
            url_ = url_.Replace("{configId}", Uri.EscapeDataString(configId.ToString()));

            if (subTreePath != null)
                url_ += string.Format("subTreePath={0}&", Uri.EscapeDataString(subTreePath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetConfigQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetConfigQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutConfigAsyncAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath)
        {
            return PutConfigAsyncAsync(tenantId, userId, configId, data, subTreePath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutConfigAsyncAsync(string tenantId, string userId, string configId, UpdatedConfigData data, string subTreePath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "configs/{tenantId}/{userId}/{configId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (configId == null)
                throw new ArgumentNullException("configId");
            url_ = url_.Replace("{configId}", Uri.EscapeDataString(configId.ToString()));

            if (subTreePath != null)
                url_ += string.Format("subTreePath={0}&", Uri.EscapeDataString(subTreePath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task DeleteConfigAsyncAsync(string tenantId, string userId, string configId, string subTreePath)
        {
            return DeleteConfigAsyncAsync(tenantId, userId, configId, subTreePath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task DeleteConfigAsyncAsync(string tenantId, string userId, string configId, string subTreePath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "configs/{tenantId}/{userId}/{configId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (configId == null)
                throw new ArgumentNullException("configId");
            url_ = url_.Replace("{configId}", Uri.EscapeDataString(configId.ToString()));

            if (subTreePath != null)
                url_ += string.Format("subTreePath={0}&", Uri.EscapeDataString(subTreePath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class EndToEndTestInboxClient : CanopyApiBase
    {
        public EndToEndTestInboxClient() : this("https://api.canopysimulations.com") { }

        public EndToEndTestInboxClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetLatestMessageAndClearMailboxAsyncAsync(string mailboxName)
        {
            return GetLatestMessageAndClearMailboxAsyncAsync(mailboxName, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetLatestMessageAndClearMailboxAsyncAsync(string mailboxName, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "test-mailboxes/{mailboxName}");

            if (mailboxName == null)
                throw new ArgumentNullException("mailboxName");
            url_ = url_.Replace("{mailboxName}", Uri.EscapeDataString(mailboxName.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class MembershipClient : CanopyApiBase
    {
        public MembershipClient() : this("https://api.canopysimulations.com") { }

        public MembershipClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PostInitializeAsyncAsync()
        {
            return PostInitializeAsyncAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PostInitializeAsyncAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/initialize");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(string.Empty);
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> PostRegistrationAsyncAsync(RegistrationData registrationData)
        {
            return PostRegistrationAsyncAsync(registrationData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> PostRegistrationAsyncAsync(RegistrationData registrationData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/registrations");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(registrationData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> PostPasswordResetRequestAsyncAsync(PasswordResetRequestData passwordResetRequestData)
        {
            return PostPasswordResetRequestAsyncAsync(passwordResetRequestData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> PostPasswordResetRequestAsyncAsync(PasswordResetRequestData passwordResetRequestData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/password-reset-requests");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(passwordResetRequestData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> PostPasswordResetConfirmationAsyncAsync(PasswordResetConfirmationData passwordResetConfirmationData)
        {
            return PostPasswordResetConfirmationAsyncAsync(passwordResetConfirmationData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> PostPasswordResetConfirmationAsyncAsync(PasswordResetConfirmationData passwordResetConfirmationData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/password-reset-confirmations");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(passwordResetConfirmationData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetPasswordResetTokenValidityAsyncAsync(string userId, string token)
        {
            return GetPasswordResetTokenValidityAsyncAsync(userId, token, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetPasswordResetTokenValidityAsyncAsync(string userId, string token, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "membership/password-reset-tokens/{userId}");

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (token == null)
                throw new ArgumentNullException("token");
            else
                url_ += string.Format("token={0}&", Uri.EscapeDataString(token.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> PostIdentifiedUserAsyncAsync(IdentifiedUserData identifiedUserData)
        {
            return PostIdentifiedUserAsyncAsync(identifiedUserData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> PostIdentifiedUserAsyncAsync(IdentifiedUserData identifiedUserData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/identified-users");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(identifiedUserData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task DeleteRefreshTokensAsyncAsync(string tenantId, string userId)
        {
            return DeleteRefreshTokensAsyncAsync(tenantId, userId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task DeleteRefreshTokensAsyncAsync(string tenantId, string userId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "membership/refresh-tokens/{tenantId}/{userId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class PoolClient : CanopyApiBase
    {
        public PoolClient() : this("https://api.canopysimulations.com") { }

        public PoolClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsyncAsync(string poolId, string formula)
        {
            return GetTestAutoScaleFormulaAsyncAsync(poolId, formula, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<TestAutoScaleFormulaQueryResult> GetTestAutoScaleFormulaAsyncAsync(string poolId, string formula, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "pools/autoscale/test");

            if (poolId == null)
                throw new ArgumentNullException("poolId");
            else
                url_ += string.Format("poolId={0}&", Uri.EscapeDataString(poolId.ToString()));

            if (formula == null)
                throw new ArgumentNullException("formula");
            else
                url_ += string.Format("formula={0}&", Uri.EscapeDataString(formula.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(TestAutoScaleFormulaQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<TestAutoScaleFormulaQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetPoolStatusQueryResult> GetPoolStatusAsyncAsync(string tenantId, bool? isSecondary)
        {
            return GetPoolStatusAsyncAsync(tenantId, isSecondary, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetPoolStatusQueryResult> GetPoolStatusAsyncAsync(string tenantId, bool? isSecondary, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "pools/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (isSecondary != null)
                url_ += string.Format("isSecondary={0}&", Uri.EscapeDataString(isSecondary.Value.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetPoolStatusQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetPoolStatusQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetPoolsQueryResult> GetPoolsAsyncAsync()
        {
            return GetPoolsAsyncAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetPoolsQueryResult> GetPoolsAsyncAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "pools");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetPoolsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetPoolsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class SimVersionClient : CanopyApiBase
    {
        public SimVersionClient() : this("https://api.canopysimulations.com") { }

        public SimVersionClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsyncAsync(string simVersion)
        {
            return GetDocumentsAsyncAsync(simVersion, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetSimVersionDocumentsQueryResult> GetDocumentsAsyncAsync(string simVersion, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "sim-versions/{simVersion}/documents");

            if (simVersion == null)
                throw new ArgumentNullException("simVersion");
            url_ = url_.Replace("{simVersion}", Uri.EscapeDataString(simVersion.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetSimVersionDocumentsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetSimVersionDocumentsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetSimVersionDocumentQueryResult> GetDocumentAsyncAsync(string simVersion, string documentPath)
        {
            return GetDocumentAsyncAsync(simVersion, documentPath, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetSimVersionDocumentQueryResult> GetDocumentAsyncAsync(string simVersion, string documentPath, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "sim-versions/{simVersion}/documents/{documentPath}");

            if (simVersion == null)
                throw new ArgumentNullException("simVersion");
            url_ = url_.Replace("{simVersion}", Uri.EscapeDataString(simVersion.ToString()));

            if (documentPath == null)
                throw new ArgumentNullException("documentPath");
            url_ = url_.Replace("{documentPath}", Uri.EscapeDataString(documentPath.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetSimVersionDocumentQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetSimVersionDocumentQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> GetSimVersionAsyncAsync()
        {
            return GetSimVersionAsyncAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> GetSimVersionAsyncAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "sim-versions/current");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(string);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PostSimVersionAsyncAsync(NewSimVersionData simVersionData)
        {
            return PostSimVersionAsyncAsync(simVersionData, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PostSimVersionAsyncAsync(NewSimVersionData simVersionData, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "sim-versions/current");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(simVersionData));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class StudyClient : CanopyApiBase
    {
        public StudyClient() : this("https://api.canopysimulations.com") { }

        public StudyClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsyncAsync()
        {
            return GetAllTenantsStudyStatisticsAsyncAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetAllTenantsStudyStatisticsQueryResult> GetAllTenantsStudyStatisticsAsyncAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/statistics");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetAllTenantsStudyStatisticsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetAllTenantsStudyStatisticsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsyncAsync(string tenantId)
        {
            return GetTenantStudyStatisticsAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantStudyStatisticsQueryResult> GetTenantStudyStatisticsAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/statistics/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantStudyStatisticsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantStudyStatisticsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyTypesQueryResult> GetStudyTypesAsyncAsync(string tenantId)
        {
            return GetStudyTypesAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyTypesQueryResult> GetStudyTypesAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/types");

            if (tenantId != null)
                url_ += string.Format("tenantId={0}&", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyTypesQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyTypesQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<SimTypeDefinition> GetSimTypeAsyncAsync(string simType, string tenantId)
        {
            return GetSimTypeAsyncAsync(simType, tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<SimTypeDefinition> GetSimTypeAsyncAsync(string simType, string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/types/sims/{simType}");

            if (simType == null)
                throw new ArgumentNullException("simType");
            url_ = url_.Replace("{simType}", Uri.EscapeDataString(simType.ToString()));

            if (tenantId != null)
                url_ += string.Format("tenantId={0}&", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(SimTypeDefinition);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<SimTypeDefinition>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<StudyTypeDefinition> GetStudyTypeAsyncAsync(string studyType, string tenantId)
        {
            return GetStudyTypeAsyncAsync(studyType, tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<StudyTypeDefinition> GetStudyTypeAsyncAsync(string studyType, string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/types/{studyType}");

            if (studyType == null)
                throw new ArgumentNullException("studyType");
            url_ = url_.Replace("{studyType}", Uri.EscapeDataString(studyType.ToString()));

            if (tenantId != null)
                url_ += string.Format("tenantId={0}&", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(StudyTypeDefinition);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<StudyTypeDefinition>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudiesQueryResult> GetStudiesAsyncAsync(string tenantId, string filter, bool? includeTransient)
        {
            return GetStudiesAsyncAsync(tenantId, filter, includeTransient, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudiesQueryResult> GetStudiesAsyncAsync(string tenantId, string filter, bool? includeTransient, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (filter != null)
                url_ += string.Format("filter={0}&", Uri.EscapeDataString(filter.ToString()));

            if (includeTransient != null)
                url_ += string.Format("includeTransient={0}&", Uri.EscapeDataString(includeTransient.Value.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudiesQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudiesQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsyncAsync(string tenantId)
        {
            return GetTenantAccessInformationAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantAccessInformationQueryResult> GetTenantAccessInformationAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/access");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantAccessInformationQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantAccessInformationQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<PostStudyResult> PostStudyAsyncAsync(string tenantId, string userId, NewStudyData data)
        {
            return PostStudyAsyncAsync(tenantId, userId, data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<PostStudyResult> PostStudyAsyncAsync(string tenantId, string userId, NewStudyData data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(PostStudyResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<PostStudyResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyQueryResult> GetStudyAsyncAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyAsyncAsync(tenantId, userId, studyId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyQueryResult> GetStudyAsyncAsync(string tenantId, string userId, string studyId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutStudyAsyncAsync(string tenantId, string userId, string studyId, UpdatedStudyData data)
        {
            return PutStudyAsyncAsync(tenantId, userId, studyId, data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutStudyAsyncAsync(string tenantId, string userId, string studyId, UpdatedStudyData data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task DeleteStudyAsyncAsync(string tenantId, string userId, string studyId)
        {
            return DeleteStudyAsyncAsync(tenantId, userId, studyId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task DeleteStudyAsyncAsync(string tenantId, string userId, string studyId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("DELETE");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetStudyDownloadAsyncAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full)
        {
            return GetStudyDownloadAsyncAsync(tenantId, userId, studyId, accessSignature, expiry, fileName, full, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetStudyDownloadAsyncAsync(string tenantId, string userId, string studyId, string accessSignature, string expiry, string fileName, bool? full, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/download");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            if (accessSignature == null)
                throw new ArgumentNullException("accessSignature");
            else
                url_ += string.Format("accessSignature={0}&", Uri.EscapeDataString(accessSignature.ToString()));

            if (expiry == null)
                throw new ArgumentNullException("expiry");
            else
                url_ += string.Format("expiry={0}&", Uri.EscapeDataString(expiry.ToString()));

            if (fileName != null)
                url_ += string.Format("fileName={0}&", Uri.EscapeDataString(fileName.ToString()));

            if (full != null)
                url_ += string.Format("full={0}&", Uri.EscapeDataString(full.Value.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<object> GetStudyJobDownloadAsyncAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv)
        {
            return GetStudyJobDownloadAsyncAsync(tenantId, userId, studyId, jobId, accessSignature, expiry, fileName, channelsAsCsv, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<object> GetStudyJobDownloadAsyncAsync(string tenantId, string userId, string studyId, string jobId, string accessSignature, string expiry, string fileName, bool? channelsAsCsv, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/download");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ = url_.Replace("{jobId}", Uri.EscapeDataString(jobId.ToString()));

            if (accessSignature == null)
                throw new ArgumentNullException("accessSignature");
            else
                url_ += string.Format("accessSignature={0}&", Uri.EscapeDataString(accessSignature.ToString()));

            if (expiry == null)
                throw new ArgumentNullException("expiry");
            else
                url_ += string.Format("expiry={0}&", Uri.EscapeDataString(expiry.ToString()));

            if (fileName != null)
                url_ += string.Format("fileName={0}&", Uri.EscapeDataString(fileName.ToString()));

            if (channelsAsCsv != null)
                url_ += string.Format("channelsAsCsv={0}&", Uri.EscapeDataString(channelsAsCsv.Value.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(object);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<object>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsyncAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyDownloadUrlAsyncAsync(tenantId, userId, studyId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyDownloadUrlQueryResult> GetStudyDownloadUrlAsyncAsync(string tenantId, string userId, string studyId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/download-url");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyDownloadUrlQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyDownloadUrlQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyQueryResult> GetStudyMetadataAsyncAsync(string tenantId, string userId, string studyId)
        {
            return GetStudyMetadataAsyncAsync(tenantId, userId, studyId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyQueryResult> GetStudyMetadataAsyncAsync(string tenantId, string userId, string studyId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/metadata");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyJobsQueryResult> GetStudyJobsAsyncAsync(string tenantId, string userId, string studyId, string filter)
        {
            return GetStudyJobsAsyncAsync(tenantId, userId, studyId, filter, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyJobsQueryResult> GetStudyJobsAsyncAsync(string tenantId, string userId, string studyId, string filter, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}?", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/jobs");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            if (filter != null)
                url_ += string.Format("filter={0}&", Uri.EscapeDataString(filter.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyJobsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyJobsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyJobQueryResult> GetStudyJobAsyncAsync(string tenantId, string userId, string studyId, string jobId)
        {
            return GetStudyJobAsyncAsync(tenantId, userId, studyId, jobId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyJobQueryResult> GetStudyJobAsyncAsync(string tenantId, string userId, string studyId, string jobId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ = url_.Replace("{jobId}", Uri.EscapeDataString(jobId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyJobQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyJobQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetStudyJobQueryResult> GetStudyJobMetadataAsyncAsync(string tenantId, string userId, string studyId, string jobId)
        {
            return GetStudyJobMetadataAsyncAsync(tenantId, userId, studyId, jobId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetStudyJobQueryResult> GetStudyJobMetadataAsyncAsync(string tenantId, string userId, string studyId, string jobId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "studies/{tenantId}/{userId}/{studyId}/jobs/{jobId}/metadata");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            if (userId == null)
                throw new ArgumentNullException("userId");
            url_ = url_.Replace("{userId}", Uri.EscapeDataString(userId.ToString()));

            if (studyId == null)
                throw new ArgumentNullException("studyId");
            url_ = url_.Replace("{studyId}", Uri.EscapeDataString(studyId.ToString()));

            if (jobId == null)
                throw new ArgumentNullException("jobId");
            url_ = url_.Replace("{jobId}", Uri.EscapeDataString(jobId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetStudyJobQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetStudyJobQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class TenancyClient : CanopyApiBase
    {
        public TenancyClient() : this("https://api.canopysimulations.com") { }

        public TenancyClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantsQueryResult> GetTenantsAsyncAsync()
        {
            return GetTenantsAsyncAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantsQueryResult> GetTenantsAsyncAsync(CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenants");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PostTenantAsyncAsync(NewTenantData data)
        {
            return PostTenantAsyncAsync(data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PostTenantAsyncAsync(NewTenantData data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenants");

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("POST");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantQueryResult> GetTenantAsyncAsync(string tenantId)
        {
            return GetTenantAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantQueryResult> GetTenantAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenants/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task PutTenantAsyncAsync(string tenantId, UpdatedTenantData data)
        {
            return PutTenantAsyncAsync(tenantId, data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No Content</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task PutTenantAsyncAsync(string tenantId, UpdatedTenantData data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenants/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "204")
            {
                return;

            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantUsersQueryResult> GetTenantUsersAsyncAsync(string tenantId)
        {
            return GetTenantUsersAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantUsersQueryResult> GetTenantUsersAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenants/{tenantId}/users");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantUsersQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantUsersQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public partial class TenantSettingsClient : CanopyApiBase
    {
        public TenantSettingsClient() : this("https://api.canopysimulations.com") { }

        public TenantSettingsClient(string baseUrl)
        {
            BaseUrl = baseUrl;
        }

        

        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

        public string BaseUrl { get; set; }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetTenantSettingsQueryResult> GetTenantSettingsAsyncAsync(string tenantId)
        {
            return GetTenantSettingsAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetTenantSettingsQueryResult> GetTenantSettingsAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenant-settings/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetTenantSettingsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetTenantSettingsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> PutTenantSettingsAsyncAsync(string tenantId, UpdatedTenantSettings data)
        {
            return PutTenantSettingsAsyncAsync(tenantId, data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> PutTenantSettingsAsyncAsync(string tenantId, UpdatedTenantSettings data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenant-settings/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(string);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsyncAsync(string tenantId)
        {
            return GetAdminTenantSettingsAsyncAsync(tenantId, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<GetAdminTenantSettingsQueryResult> GetAdminTenantSettingsAsyncAsync(string tenantId, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenant-settings/admin/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            request_.Method = new HttpMethod("GET");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(GetAdminTenantSettingsQueryResult);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<GetAdminTenantSettingsQueryResult>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public Task<string> PutAdminTenantSettingsAsyncAsync(string tenantId, UpdatedAdminTenantSettings data)
        {
            return PutAdminTenantSettingsAsyncAsync(tenantId, data, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>OK</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public async Task<string> PutAdminTenantSettingsAsyncAsync(string tenantId, UpdatedAdminTenantSettings data, CancellationToken cancellationToken)
        {
            var url_ = string.Format("{0}/{1}", BaseUrl, "tenant-settings/admin/{tenantId}");

            if (tenantId == null)
                throw new ArgumentNullException("tenantId");
            url_ = url_.Replace("{tenantId}", Uri.EscapeDataString(tenantId.ToString()));

            var client_ = await CreateHttpClientAsync(cancellationToken).ConfigureAwait(false);
            var request_ = await CreateHttpRequestMessageAsync(cancellationToken).ConfigureAwait(false);
            base.PrepareRequest(client_, ref url_);
            var content_ = new StringContent(JsonConvert.SerializeObject(data));
            content_.Headers.ContentType.MediaType = "application/json";
            request_.Content = content_;
            request_.Method = new HttpMethod("PUT");
            request_.RequestUri = new Uri(url_);
            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
            ProcessResponse(client_, response_);

            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
            var status_ = ((int)response_.StatusCode).ToString();

            if (status_ == "200")
            {
                var result_ = default(string);
                try
                {
                    if (responseData_.Length > 0)
                        result_ = JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
                    return result_;
                }
                catch (Exception exception)
                {
                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
                }
            }
            else
            {
            }

            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
        }

    }



    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetAccountSettingsResult : INotifyPropertyChanged
    {
        private string _username;
        private string _email;

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetAccountSettingsResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetAccountSettingsResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class Username : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Username FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Username>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class Email : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Email FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Email>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedAccountSettings : INotifyPropertyChanged
    {
        private string _newUsername;
        private string _newEmail;
        private string _newPassword;

        [JsonProperty("newUsername", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewUsername
        {
            get { return _newUsername; }
            set
            {
                if (_newUsername != value)
                {
                    _newUsername = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("newEmail", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewEmail
        {
            get { return _newEmail; }
            set
            {
                if (_newEmail != value)
                {
                    _newEmail = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("newPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedAccountSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedAccountSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class AvailabilityResult : INotifyPropertyChanged
    {
        private bool? _database;
        private bool? _api;

        [JsonProperty("database", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Database
        {
            get { return _database; }
            set
            {
                if (_database != value)
                {
                    _database = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("api", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? Api
        {
            get { return _api; }
            set
            {
                if (_api != value)
                {
                    _api = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AvailabilityResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AvailabilityResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class FilteredQueryResult : INotifyPropertyChanged
    {
        private DocumentsAndContinuationToken _queryResults = new DocumentsAndContinuationToken();
        private ObservableCollection<DocumentCustomPropertyGroup> _groupResults;

        [JsonProperty("queryResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("groupResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static FilteredQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<FilteredQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentsAndContinuationToken : INotifyPropertyChanged
    {
        private ObservableCollection<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [JsonProperty("documents", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("continuationToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("hasMoreResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentsAndContinuationToken FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentsAndContinuationToken>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentCustomPropertyGroup : INotifyPropertyChanged
    {
        private string _name;
        private ObservableCollection<DocumentGroupResult> _groups;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("groups", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentGroupResult> Groups
        {
            get { return _groups; }
            set
            {
                if (_groups != value)
                {
                    _groups = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentCustomPropertyGroup FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentCustomPropertyGroup>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class CanopyDocument : INotifyPropertyChanged
    {
        private string _documentId;
        private string _tenantId;
        private string _userId;
        private string _name;
        private CanopyDocumentType? _type;
        private CanopyDocumentSubType? _subType;
        private string _simVersion;
        private DateTime? _creationDate;
        private DateTime? _modifiedDate;
        private object _properties;
        private object _data;

        [JsonProperty("documentId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string DocumentId
        {
            get { return _documentId; }
            set
            {
                if (_documentId != value)
                {
                    _documentId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("type", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CanopyDocumentType? Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("subType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public CanopyDocumentSubType? SubType
        {
            get { return _subType; }
            set
            {
                if (_subType != value)
                {
                    _subType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("creationDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("modifiedDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? ModifiedDate
        {
            get { return _modifiedDate; }
            set
            {
                if (_modifiedDate != value)
                {
                    _modifiedDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("data", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CanopyDocument FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CanopyDocument>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentGroupResult : INotifyPropertyChanged
    {
        private string _key;
        private int? _count;

        [JsonProperty("key", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Key
        {
            get { return _key; }
            set
            {
                if (_key != value)
                {
                    _key = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("count", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? Count
        {
            get { return _count; }
            set
            {
                if (_count != value)
                {
                    _count = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentGroupResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentGroupResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentId : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentId FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentId>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TenantId : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TenantId FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TenantId>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UserId : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UserId FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserId>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class SimVersion : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static SimVersion FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SimVersion>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NewConfigData : INotifyPropertyChanged
    {
        private string _name;
        private NewConfigDataConfigType? _configType;
        private ObservableCollection<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _simVersion;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("configType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public NewConfigDataConfigType? ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("config", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NewConfigData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewConfigData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentCustomPropertyData : INotifyPropertyChanged
    {
        private string _name;
        private string _value;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentCustomPropertyData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentCustomPropertyData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedConfigData : INotifyPropertyChanged
    {
        private string _name;
        private UpdatedConfigDataConfigType? _configType;
        private ObservableCollection<DocumentCustomPropertyData> _properties;
        private object _config;
        private string _simVersion;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("configType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public UpdatedConfigDataConfigType? ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("config", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedConfigData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedConfigData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetConfigQueryResult : INotifyPropertyChanged
    {
        private CanopyDocument _config = new CanopyDocument();

        [JsonProperty("config", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CanopyDocument Config
        {
            get { return _config; }
            set
            {
                if (_config != value)
                {
                    _config = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetConfigQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetConfigQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class RegistrationData : INotifyPropertyChanged
    {
        private string _tenantId;
        private string _email;
        private string _username;
        private string _password;

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("password", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Password
        {
            get { return _password; }
            set
            {
                if (_password != value)
                {
                    _password = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static RegistrationData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<RegistrationData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class PasswordResetRequestData : INotifyPropertyChanged
    {
        private string _tenant;
        private string _email;
        private string _username;

        [JsonProperty("tenant", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PasswordResetRequestData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PasswordResetRequestData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class PasswordResetConfirmationData : INotifyPropertyChanged
    {
        private string _userId;
        private string _newPassword;
        private string _token;

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("newPassword", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string NewPassword
        {
            get { return _newPassword; }
            set
            {
                if (_newPassword != value)
                {
                    _newPassword = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("token", Required = Required.Always)]
        [Required]
        public string Token
        {
            get { return _token; }
            set
            {
                if (_token != value)
                {
                    _token = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PasswordResetConfirmationData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PasswordResetConfirmationData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class IdentifiedUserData : INotifyPropertyChanged
    {
        private bool? _isUpdate;
        private string _tenant;
        private string _username;
        private string _email;

        [JsonProperty("isUpdate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsUpdate
        {
            get { return _isUpdate; }
            set
            {
                if (_isUpdate != value)
                {
                    _isUpdate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("tenant", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Tenant
        {
            get { return _tenant; }
            set
            {
                if (_tenant != value)
                {
                    _tenant = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static IdentifiedUserData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<IdentifiedUserData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TestAutoScaleFormulaQueryResult : INotifyPropertyChanged
    {
        private AutoScaleRun _autoScaleRun = new AutoScaleRun();

        [JsonProperty("autoScaleRun", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public AutoScaleRun AutoScaleRun
        {
            get { return _autoScaleRun; }
            set
            {
                if (_autoScaleRun != value)
                {
                    _autoScaleRun = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TestAutoScaleFormulaQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TestAutoScaleFormulaQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class AutoScaleRun : INotifyPropertyChanged
    {
        private AutoScaleRunError _error = new AutoScaleRunError();
        private string _results;
        private DateTime? _timestamp;

        [JsonProperty("error", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public AutoScaleRunError Error
        {
            get { return _error; }
            set
            {
                if (_error != value)
                {
                    _error = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("results", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Results
        {
            get { return _results; }
            set
            {
                if (_results != value)
                {
                    _results = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("timestamp", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? Timestamp
        {
            get { return _timestamp; }
            set
            {
                if (_timestamp != value)
                {
                    _timestamp = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AutoScaleRun FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AutoScaleRun>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class AutoScaleRunError : INotifyPropertyChanged
    {
        private string _code;
        private string _message;
        private ObservableCollection<NameValuePair> _values;

        [JsonProperty("code", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("message", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("values", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<NameValuePair> Values
        {
            get { return _values; }
            set
            {
                if (_values != value)
                {
                    _values = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AutoScaleRunError FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AutoScaleRunError>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NameValuePair : INotifyPropertyChanged
    {
        private string _name;
        private string _value;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("value", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Value
        {
            get { return _value; }
            set
            {
                if (_value != value)
                {
                    _value = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NameValuePair FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NameValuePair>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetPoolStatusQueryResult : INotifyPropertyChanged
    {
        private string _poolId;
        private GetPoolStatusQueryResultPoolState? _poolState;
        private GetPoolStatusQueryResultAllocationState? _allocationState;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private int? _maximumTasksPerNode;
        private int? _schedulableComputeNodes;
        private int? _runningTasks;
        private ObservableCollection<ComputeNodeResult> _computeNodes;

        [JsonProperty("poolId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("poolState", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public GetPoolStatusQueryResultPoolState? PoolState
        {
            get { return _poolState; }
            set
            {
                if (_poolState != value)
                {
                    _poolState = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("allocationState", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public GetPoolStatusQueryResultAllocationState? AllocationState
        {
            get { return _allocationState; }
            set
            {
                if (_allocationState != value)
                {
                    _allocationState = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("currentDedicated", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("targetDedicated", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("maximumTasksPerNode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? MaximumTasksPerNode
        {
            get { return _maximumTasksPerNode; }
            set
            {
                if (_maximumTasksPerNode != value)
                {
                    _maximumTasksPerNode = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("schedulableComputeNodes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? SchedulableComputeNodes
        {
            get { return _schedulableComputeNodes; }
            set
            {
                if (_schedulableComputeNodes != value)
                {
                    _schedulableComputeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("runningTasks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("computeNodes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<ComputeNodeResult> ComputeNodes
        {
            get { return _computeNodes; }
            set
            {
                if (_computeNodes != value)
                {
                    _computeNodes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetPoolStatusQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetPoolStatusQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class PoolId : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PoolId FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PoolId>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class ComputeNodeResult : INotifyPropertyChanged
    {
        private string _computeNodeId;
        private ComputeNodeResultState? _state;
        private int? _runningTasks;

        [JsonProperty("computeNodeId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ComputeNodeId
        {
            get { return _computeNodeId; }
            set
            {
                if (_computeNodeId != value)
                {
                    _computeNodeId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("state", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public ComputeNodeResultState? State
        {
            get { return _state; }
            set
            {
                if (_state != value)
                {
                    _state = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("runningTasks", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? RunningTasks
        {
            get { return _runningTasks; }
            set
            {
                if (_runningTasks != value)
                {
                    _runningTasks = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ComputeNodeResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ComputeNodeResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetPoolsQueryResult : INotifyPropertyChanged
    {
        private ObservableCollection<GetPoolsItem> _pools;

        [JsonProperty("pools", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<GetPoolsItem> Pools
        {
            get { return _pools; }
            set
            {
                if (_pools != value)
                {
                    _pools = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetPoolsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetPoolsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetPoolsItem : INotifyPropertyChanged
    {
        private string _poolId;
        private int? _currentDedicated;
        private int? _targetDedicated;
        private ObservableCollection<GetPoolsItemInterval> _intervals;

        [JsonProperty("poolId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("currentDedicated", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? CurrentDedicated
        {
            get { return _currentDedicated; }
            set
            {
                if (_currentDedicated != value)
                {
                    _currentDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("targetDedicated", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public int? TargetDedicated
        {
            get { return _targetDedicated; }
            set
            {
                if (_targetDedicated != value)
                {
                    _targetDedicated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("intervals", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<GetPoolsItemInterval> Intervals
        {
            get { return _intervals; }
            set
            {
                if (_intervals != value)
                {
                    _intervals = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetPoolsItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetPoolsItem>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetPoolsItemInterval : INotifyPropertyChanged
    {
        private double? _totalCoreHours;
        private double? _dataEgressGiB;
        private double? _dataIngressGiB;

        [JsonProperty("totalCoreHours", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? TotalCoreHours
        {
            get { return _totalCoreHours; }
            set
            {
                if (_totalCoreHours != value)
                {
                    _totalCoreHours = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("dataEgressGiB", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DataEgressGiB
        {
            get { return _dataEgressGiB; }
            set
            {
                if (_dataEgressGiB != value)
                {
                    _dataEgressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("dataIngressGiB", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public double? DataIngressGiB
        {
            get { return _dataIngressGiB; }
            set
            {
                if (_dataIngressGiB != value)
                {
                    _dataIngressGiB = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetPoolsItemInterval FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetPoolsItemInterval>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetSimVersionDocumentsQueryResult : INotifyPropertyChanged
    {
        private string _simVersion;
        private ObservableCollection<TextDocumentOptionalContent> _documents;

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("documents", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TextDocumentOptionalContent> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetSimVersionDocumentsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetSimVersionDocumentsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TextDocumentOptionalContent : INotifyPropertyChanged
    {
        private string _name;
        private string _content;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("content", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TextDocumentOptionalContent FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TextDocumentOptionalContent>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetSimVersionDocumentQueryResult : INotifyPropertyChanged
    {
        private TextDocument _document = new TextDocument();

        [JsonProperty("document", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TextDocument Document
        {
            get { return _document; }
            set
            {
                if (_document != value)
                {
                    _document = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetSimVersionDocumentQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetSimVersionDocumentQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TextDocument : INotifyPropertyChanged
    {
        private string _name;
        private string _content;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("content", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Content
        {
            get { return _content; }
            set
            {
                if (_content != value)
                {
                    _content = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TextDocument FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TextDocument>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NewSimVersionData : INotifyPropertyChanged
    {
        private string _simVersion;

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NewSimVersionData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewSimVersionData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetAllTenantsStudyStatisticsQueryResult : INotifyPropertyChanged
    {
        private ObservableCollection<TenantStatistics> _tenants;

        [JsonProperty("tenants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TenantStatistics> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetAllTenantsStudyStatisticsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetAllTenantsStudyStatisticsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TenantStatistics : INotifyPropertyChanged
    {
        private string _tenantId;
        private object _statistics;

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("statistics", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TenantStatistics FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TenantStatistics>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantStudyStatisticsQueryResult : INotifyPropertyChanged
    {
        private object _statistics;

        [JsonProperty("statistics", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Statistics
        {
            get { return _statistics; }
            set
            {
                if (_statistics != value)
                {
                    _statistics = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantStudyStatisticsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantStudyStatisticsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudyTypesQueryResult : INotifyPropertyChanged
    {
        private ObservableCollection<StudyTypeDefinition> _studyTypes;
        private ObservableCollection<SimTypeDefinition> _simTypes;
        private ObservableCollection<Anonymous> _configTypes;

        [JsonProperty("studyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<StudyTypeDefinition> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<SimTypeDefinition> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("configTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudyTypesQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudyTypesQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class StudyTypeDefinition : INotifyPropertyChanged
    {
        private StudyTypeDefinitionStudyType? _studyType;
        private string _name;
        private ObservableCollection<Anonymous1> _simTypes;
        private ObservableCollection<SimulationInput> _inputs;

        [JsonProperty("studyType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public StudyTypeDefinitionStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous1> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("inputs", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<SimulationInput> Inputs
        {
            get { return _inputs; }
            set
            {
                if (_inputs != value)
                {
                    _inputs = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static StudyTypeDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<StudyTypeDefinition>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class SimTypeDefinition : INotifyPropertyChanged
    {
        private SimTypeDefinitionSimType? _simType;
        private string _name;
        private ObservableCollection<string> _knownOutputFiles;

        [JsonProperty("simType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public SimTypeDefinitionSimType? SimType
        {
            get { return _simType; }
            set
            {
                if (_simType != value)
                {
                    _simType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("knownOutputFiles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<string> KnownOutputFiles
        {
            get { return _knownOutputFiles; }
            set
            {
                if (_knownOutputFiles != value)
                {
                    _knownOutputFiles = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static SimTypeDefinition FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SimTypeDefinition>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class SimulationInput : INotifyPropertyChanged
    {
        private SimulationInputConfigType? _configType;
        private bool? _isRequired;

        [JsonProperty("configType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public SimulationInputConfigType? ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isRequired", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsRequired
        {
            get { return _isRequired; }
            set
            {
                if (_isRequired != value)
                {
                    _isRequired = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static SimulationInput FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SimulationInput>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudiesQueryResult : INotifyPropertyChanged
    {
        private StudyDocumentsAndContinuationToken _queryResults = new StudyDocumentsAndContinuationToken();
        private ObservableCollection<DocumentCustomPropertyGroup> _groupResults;

        [JsonProperty("queryResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public StudyDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("groupResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudiesQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudiesQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class StudyDocumentsAndContinuationToken : INotifyPropertyChanged
    {
        private ObservableCollection<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [JsonProperty("documents", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("continuationToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("hasMoreResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static StudyDocumentsAndContinuationToken FromJson(string data)
        {
            return JsonConvert.DeserializeObject<StudyDocumentsAndContinuationToken>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantAccessInformationQueryResult : INotifyPropertyChanged
    {
        private string _tenantUrl;
        private string _accessSignature;

        [JsonProperty("tenantUrl", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantUrl
        {
            get { return _tenantUrl; }
            set
            {
                if (_tenantUrl != value)
                {
                    _tenantUrl = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("accessSignature", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantAccessInformationQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantAccessInformationQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NewStudyData : INotifyPropertyChanged
    {
        private string _name;
        private bool? _isTransient;
        private NewStudyDataStudyType? _studyType;
        private ObservableCollection<NewStudyDataSource> _sources;
        private ObservableCollection<DocumentCustomPropertyData> _properties;
        private object _study;
        private string _simVersion;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isTransient", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsTransient
        {
            get { return _isTransient; }
            set
            {
                if (_isTransient != value)
                {
                    _isTransient = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("studyType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public NewStudyDataStudyType? StudyType
        {
            get { return _studyType; }
            set
            {
                if (_studyType != value)
                {
                    _studyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("sources", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<NewStudyDataSource> Sources
        {
            get { return _sources; }
            set
            {
                if (_sources != value)
                {
                    _sources = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("study", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public object Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NewStudyData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewStudyData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NewStudyDataSource : INotifyPropertyChanged
    {
        private NewStudyDataSourceConfigType? _configType;
        private string _userId;
        private string _configId;
        private string _name;
        private bool? _isEdited;

        [JsonProperty("configType", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public NewStudyDataSourceConfigType? ConfigType
        {
            get { return _configType; }
            set
            {
                if (_configType != value)
                {
                    _configType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("configId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ConfigId
        {
            get { return _configId; }
            set
            {
                if (_configId != value)
                {
                    _configId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isEdited", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEdited
        {
            get { return _isEdited; }
            set
            {
                if (_isEdited != value)
                {
                    _isEdited = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NewStudyDataSource FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewStudyDataSource>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class PostStudyResult : INotifyPropertyChanged
    {
        private string _studyId;

        [JsonProperty("studyId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string StudyId
        {
            get { return _studyId; }
            set
            {
                if (_studyId != value)
                {
                    _studyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PostStudyResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PostStudyResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedStudyData : INotifyPropertyChanged
    {
        private string _name;
        private ObservableCollection<DocumentCustomPropertyData> _properties;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyData> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedStudyData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedStudyData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudyQueryResult : INotifyPropertyChanged
    {
        private CanopyDocument _study = new CanopyDocument();
        private StudyBlobAccessInformation _accessInformation = new StudyBlobAccessInformation();
        private ObservableCollection<Anonymous2> _simTypes;

        [JsonProperty("study", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CanopyDocument Study
        {
            get { return _study; }
            set
            {
                if (_study != value)
                {
                    _study = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("accessInformation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public StudyBlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous2> SimTypes
        {
            get { return _simTypes; }
            set
            {
                if (_simTypes != value)
                {
                    _simTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudyQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudyQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class StudyBlobAccessInformation : INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;
        private ObservableCollection<BlobAccessInformation> _jobs;

        [JsonProperty("url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("accessSignature", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("jobs", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<BlobAccessInformation> Jobs
        {
            get { return _jobs; }
            set
            {
                if (_jobs != value)
                {
                    _jobs = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static StudyBlobAccessInformation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<StudyBlobAccessInformation>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class BlobAccessInformation : INotifyPropertyChanged
    {
        private string _url;
        private string _accessSignature;

        [JsonProperty("url", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Url
        {
            get { return _url; }
            set
            {
                if (_url != value)
                {
                    _url = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("accessSignature", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static BlobAccessInformation FromJson(string data)
        {
            return JsonConvert.DeserializeObject<BlobAccessInformation>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudyDownloadUrlQueryResult : INotifyPropertyChanged
    {
        private string _accessSignature;
        private string _expiry;

        [JsonProperty("accessSignature", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AccessSignature
        {
            get { return _accessSignature; }
            set
            {
                if (_accessSignature != value)
                {
                    _accessSignature = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("expiry", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Expiry
        {
            get { return _expiry; }
            set
            {
                if (_expiry != value)
                {
                    _expiry = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudyDownloadUrlQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudyDownloadUrlQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudyJobsQueryResult : INotifyPropertyChanged
    {
        private StudyJobDocumentsAndContinuationToken _queryResults = new StudyJobDocumentsAndContinuationToken();
        private ObservableCollection<DocumentCustomPropertyGroup> _groupResults;

        [JsonProperty("queryResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public StudyJobDocumentsAndContinuationToken QueryResults
        {
            get { return _queryResults; }
            set
            {
                if (_queryResults != value)
                {
                    _queryResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("groupResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyGroup> GroupResults
        {
            get { return _groupResults; }
            set
            {
                if (_groupResults != value)
                {
                    _groupResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudyJobsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudyJobsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class StudyJobDocumentsAndContinuationToken : INotifyPropertyChanged
    {
        private ObservableCollection<CanopyDocument> _documents;
        private string _continuationToken;
        private bool? _hasMoreResults;

        [JsonProperty("documents", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<CanopyDocument> Documents
        {
            get { return _documents; }
            set
            {
                if (_documents != value)
                {
                    _documents = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("continuationToken", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ContinuationToken
        {
            get { return _continuationToken; }
            set
            {
                if (_continuationToken != value)
                {
                    _continuationToken = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("hasMoreResults", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? HasMoreResults
        {
            get { return _hasMoreResults; }
            set
            {
                if (_hasMoreResults != value)
                {
                    _hasMoreResults = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static StudyJobDocumentsAndContinuationToken FromJson(string data)
        {
            return JsonConvert.DeserializeObject<StudyJobDocumentsAndContinuationToken>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetStudyJobQueryResult : INotifyPropertyChanged
    {
        private CanopyDocument _studyJob = new CanopyDocument();
        private BlobAccessInformation _accessInformation = new BlobAccessInformation();

        [JsonProperty("studyJob", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public CanopyDocument StudyJob
        {
            get { return _studyJob; }
            set
            {
                if (_studyJob != value)
                {
                    _studyJob = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("accessInformation", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public BlobAccessInformation AccessInformation
        {
            get { return _accessInformation; }
            set
            {
                if (_accessInformation != value)
                {
                    _accessInformation = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetStudyJobQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetStudyJobQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class NewTenantData : INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("shortName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static NewTenantData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<NewTenantData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantsQueryResult : INotifyPropertyChanged
    {
        private ObservableCollection<TenantItem> _tenants;

        [JsonProperty("tenants", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<TenantItem> Tenants
        {
            get { return _tenants; }
            set
            {
                if (_tenants != value)
                {
                    _tenants = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TenantItem : INotifyPropertyChanged
    {
        private string _tenantId;
        private string _name;
        private string _shortName;
        private DateTime? _creationDate;
        private bool? _isEnabled;

        [JsonProperty("tenantId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string TenantId
        {
            get { return _tenantId; }
            set
            {
                if (_tenantId != value)
                {
                    _tenantId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("shortName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("creationDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isEnabled", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TenantItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TenantItem>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TenantName : INotifyPropertyChanged
    {

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TenantName FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TenantName>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedTenantData : INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private bool? _isEnabled;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("shortName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isEnabled", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedTenantData FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedTenantData>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantQueryResult : INotifyPropertyChanged
    {
        private string _name;
        private string _shortName;
        private DateTime? _creationDate;
        private bool? _isEnabled;

        [JsonProperty("name", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("shortName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ShortName
        {
            get { return _shortName; }
            set
            {
                if (_shortName != value)
                {
                    _shortName = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("creationDate", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public DateTime? CreationDate
        {
            get { return _creationDate; }
            set
            {
                if (_creationDate != value)
                {
                    _creationDate = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("isEnabled", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public bool? IsEnabled
        {
            get { return _isEnabled; }
            set
            {
                if (_isEnabled != value)
                {
                    _isEnabled = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantUsersQueryResult : INotifyPropertyChanged
    {
        private ObservableCollection<UserItem> _users;

        [JsonProperty("users", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<UserItem> Users
        {
            get { return _users; }
            set
            {
                if (_users != value)
                {
                    _users = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantUsersQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantUsersQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UserItem : INotifyPropertyChanged
    {
        private string _userId;
        private string _username;
        private string _email;
        private ObservableCollection<string> _roles;

        [JsonProperty("userId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string UserId
        {
            get { return _userId; }
            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("username", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Username
        {
            get { return _username; }
            set
            {
                if (_username != value)
                {
                    _username = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("email", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Email
        {
            get { return _email; }
            set
            {
                if (_email != value)
                {
                    _email = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("roles", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<string> Roles
        {
            get { return _roles; }
            set
            {
                if (_roles != value)
                {
                    _roles = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UserItem FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UserItem>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetTenantSettingsQueryResult : INotifyPropertyChanged
    {
        private TenantSettings _settings = new TenantSettings();
        private ObservableCollection<DocumentTypeCustomPropertyGroups> _customPropertyGroups;
        private ObservableCollection<Anonymous3> _studyTypes;
        private ObservableCollection<Anonymous4> _configTypes;
        private string _eTag;

        [JsonProperty("settings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public TenantSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("customPropertyGroups", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentTypeCustomPropertyGroups> CustomPropertyGroups
        {
            get { return _customPropertyGroups; }
            set
            {
                if (_customPropertyGroups != value)
                {
                    _customPropertyGroups = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("studyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous3> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("configTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous4> ConfigTypes
        {
            get { return _configTypes; }
            set
            {
                if (_configTypes != value)
                {
                    _configTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("eTag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetTenantSettingsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetTenantSettingsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class TenantSettings : INotifyPropertyChanged
    {
        private ObservableCollection<DefaultCustomPropertyNames> _defaultCustomPropertyNames;

        [JsonProperty("defaultCustomPropertyNames", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DefaultCustomPropertyNames> DefaultCustomPropertyNames
        {
            get { return _defaultCustomPropertyNames; }
            set
            {
                if (_defaultCustomPropertyNames != value)
                {
                    _defaultCustomPropertyNames = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TenantSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TenantSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DocumentTypeCustomPropertyGroups : INotifyPropertyChanged
    {
        private DocumentTypeCustomPropertyGroupsTarget? _target;
        private ObservableCollection<DocumentCustomPropertyGroup> _properties;

        [JsonProperty("target", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DocumentTypeCustomPropertyGroupsTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("properties", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<DocumentCustomPropertyGroup> Properties
        {
            get { return _properties; }
            set
            {
                if (_properties != value)
                {
                    _properties = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DocumentTypeCustomPropertyGroups FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DocumentTypeCustomPropertyGroups>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class DefaultCustomPropertyNames : INotifyPropertyChanged
    {
        private DefaultCustomPropertyNamesTarget? _target;
        private ObservableCollection<string> _names;

        [JsonProperty("target", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(StringEnumConverter))]
        public DefaultCustomPropertyNamesTarget? Target
        {
            get { return _target; }
            set
            {
                if (_target != value)
                {
                    _target = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("names", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<string> Names
        {
            get { return _names; }
            set
            {
                if (_names != value)
                {
                    _names = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DefaultCustomPropertyNames FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DefaultCustomPropertyNames>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedTenantSettings : INotifyPropertyChanged
    {
        private Builder _settings = new Builder();
        private string _eTag;

        [JsonProperty("settings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Builder Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("eTag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedTenantSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedTenantSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class Builder : INotifyPropertyChanged
    {
        private ObservableCollection<Anonymous5> _studyTypes;
        private string _simVersion;
        private PoolSettings _poolSettings = new PoolSettings();
        private PoolSettings _secondaryPoolSettings = new PoolSettings();

        [JsonProperty("studyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous5> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("poolSettings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("secondaryPoolSettings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static Builder FromJson(string data)
        {
            return JsonConvert.DeserializeObject<Builder>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class GetAdminTenantSettingsQueryResult : INotifyPropertyChanged
    {
        private AdminTenantSettings _settings = new AdminTenantSettings();
        private string _eTag;

        [JsonProperty("settings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public AdminTenantSettings Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("eTag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static GetAdminTenantSettingsQueryResult FromJson(string data)
        {
            return JsonConvert.DeserializeObject<GetAdminTenantSettingsQueryResult>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class AdminTenantSettings : INotifyPropertyChanged
    {
        private ObservableCollection<Anonymous6> _studyTypes;
        private string _simVersion;
        private PoolSettings _poolSettings = new PoolSettings();
        private PoolSettings _secondaryPoolSettings = new PoolSettings();

        [JsonProperty("studyTypes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public ObservableCollection<Anonymous6> StudyTypes
        {
            get { return _studyTypes; }
            set
            {
                if (_studyTypes != value)
                {
                    _studyTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("simVersion", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string SimVersion
        {
            get { return _simVersion; }
            set
            {
                if (_simVersion != value)
                {
                    _simVersion = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("poolSettings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public PoolSettings PoolSettings
        {
            get { return _poolSettings; }
            set
            {
                if (_poolSettings != value)
                {
                    _poolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("secondaryPoolSettings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public PoolSettings SecondaryPoolSettings
        {
            get { return _secondaryPoolSettings; }
            set
            {
                if (_secondaryPoolSettings != value)
                {
                    _secondaryPoolSettings = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static AdminTenantSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<AdminTenantSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class PoolSettings : INotifyPropertyChanged
    {
        private string _poolId;
        private string _autoScaleFormula;

        [JsonProperty("poolId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string PoolId
        {
            get { return _poolId; }
            set
            {
                if (_poolId != value)
                {
                    _poolId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("autoScaleFormula", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string AutoScaleFormula
        {
            get { return _autoScaleFormula; }
            set
            {
                if (_autoScaleFormula != value)
                {
                    _autoScaleFormula = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PoolSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PoolSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [JsonObject(MemberSerialization.OptIn)]
    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public partial class UpdatedAdminTenantSettings : INotifyPropertyChanged
    {
        private Builder _settings = new Builder();
        private string _eTag;

        [JsonProperty("settings", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public Builder Settings
        {
            get { return _settings; }
            set
            {
                if (_settings != value)
                {
                    _settings = value;
                    RaisePropertyChanged();
                }
            }
        }

        [JsonProperty("eTag", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string ETag
        {
            get { return _eTag; }
            set
            {
                if (_eTag != value)
                {
                    _eTag = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static UpdatedAdminTenantSettings FromJson(string data)
        {
            return JsonConvert.DeserializeObject<UpdatedAdminTenantSettings>(data);
        }

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum CanopyDocumentType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "config")]
        Config = 1,

        [EnumMember(Value = "study")]
        Study = 2,

        [EnumMember(Value = "tenantSettings")]
        TenantSettings = 3,

        [EnumMember(Value = "adminTenantSettings")]
        AdminTenantSettings = 4,

        [EnumMember(Value = "configSubTree")]
        ConfigSubTree = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum CanopyDocumentSubType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum NewConfigDataConfigType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum UpdatedConfigDataConfigType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum GetPoolStatusQueryResultPoolState
    {
        [EnumMember(Value = "active")]
        Active = 0,

        [EnumMember(Value = "deleting")]
        Deleting = 1,

        [EnumMember(Value = "upgrading")]
        Upgrading = 2,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum GetPoolStatusQueryResultAllocationState
    {
        [EnumMember(Value = "steady")]
        Steady = 0,

        [EnumMember(Value = "resizing")]
        Resizing = 1,

        [EnumMember(Value = "stopping")]
        Stopping = 2,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum ComputeNodeResultState
    {
        [EnumMember(Value = "idle")]
        Idle = 0,

        [EnumMember(Value = "rebooting")]
        Rebooting = 1,

        [EnumMember(Value = "reimaging")]
        Reimaging = 2,

        [EnumMember(Value = "running")]
        Running = 3,

        [EnumMember(Value = "unusable")]
        Unusable = 4,

        [EnumMember(Value = "creating")]
        Creating = 5,

        [EnumMember(Value = "starting")]
        Starting = 6,

        [EnumMember(Value = "waitingForStartTask")]
        WaitingForStartTask = 7,

        [EnumMember(Value = "startTaskFailed")]
        StartTaskFailed = 8,

        [EnumMember(Value = "unknown")]
        Unknown = 9,

        [EnumMember(Value = "leavingPool")]
        LeavingPool = 10,

        [EnumMember(Value = "offline")]
        Offline = 11,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum StudyTypeDefinitionStudyType
    {
        [EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "deploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "failureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous1
    {
        [EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "FailureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum SimTypeDefinitionSimType
    {
        [EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "FailureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum SimulationInputConfigType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum NewStudyDataStudyType
    {
        [EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "deploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "failureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum NewStudyDataSourceConfigType
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous2
    {
        [EnumMember(Value = "StraightSim")]
        StraightSim = 0,

        [EnumMember(Value = "ApexSim")]
        ApexSim = 1,

        [EnumMember(Value = "QuasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "GenerateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "DeploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "FailureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous3
    {
        [EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "deploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "failureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous4
    {
        [EnumMember(Value = "automatedTest")]
        AutomatedTest = 0,

        [EnumMember(Value = "automatedTest2")]
        AutomatedTest2 = 1,

        [EnumMember(Value = "car")]
        Car = 2,

        [EnumMember(Value = "track")]
        Track = 3,

        [EnumMember(Value = "weather")]
        Weather = 4,

        [EnumMember(Value = "exploration")]
        Exploration = 5,

        [EnumMember(Value = "lineMultiPlotViewer")]
        LineMultiPlotViewer = 6,

        [EnumMember(Value = "pointMultiPlotViewer")]
        PointMultiPlotViewer = 7,

        [EnumMember(Value = "parallelCoordinatesViewer")]
        ParallelCoordinatesViewer = 8,

        [EnumMember(Value = "trackViewer")]
        TrackViewer = 9,

        [EnumMember(Value = "definition")]
        Definition = 10,

        [EnumMember(Value = "job")]
        Job = 11,

        [EnumMember(Value = "result")]
        Result = 12,

        [EnumMember(Value = "baseline")]
        Baseline = 13,

        [EnumMember(Value = "deletedDefinition")]
        DeletedDefinition = 14,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum DocumentTypeCustomPropertyGroupsTarget
    {
        [EnumMember(Value = "car")]
        Car = 0,

        [EnumMember(Value = "track")]
        Track = 1,

        [EnumMember(Value = "weather")]
        Weather = 2,

        [EnumMember(Value = "exploration")]
        Exploration = 3,

        [EnumMember(Value = "study")]
        Study = 4,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum DefaultCustomPropertyNamesTarget
    {
        [EnumMember(Value = "car")]
        Car = 0,

        [EnumMember(Value = "track")]
        Track = 1,

        [EnumMember(Value = "weather")]
        Weather = 2,

        [EnumMember(Value = "exploration")]
        Exploration = 3,

        [EnumMember(Value = "study")]
        Study = 4,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous5
    {
        [EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "deploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "failureSim")]
        FailureSim = 5,

    }

    [GeneratedCode("NJsonSchema", "4.28.6128.27588")]
    public enum Anonymous6
    {
        [EnumMember(Value = "straightSim")]
        StraightSim = 0,

        [EnumMember(Value = "apexSim")]
        ApexSim = 1,

        [EnumMember(Value = "quasiStaticLap")]
        QuasiStaticLap = 2,

        [EnumMember(Value = "generateRacingLine")]
        GenerateRacingLine = 3,

        [EnumMember(Value = "deploymentLap")]
        DeploymentLap = 4,

        [EnumMember(Value = "failureSim")]
        FailureSim = 5,

    }


    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public class SwaggerException : Exception
    {
        public string StatusCode { get; private set; }

        public byte[] ResponseData { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            ResponseData = responseData;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
        }
    }

    [GeneratedCode("NSwag", "6.11.6129.25106")]
    public class SwaggerException<TResponse> : SwaggerException
    {
        public TResponse Response { get; private set; }

        public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException)
            : base(message, statusCode, responseData, innerException)
        {
            Response = response;
        }
    }

}